#!/bin/sh
function help {
	echo "Help:"
	echo "yad <action> [parameters...]"
	echo "Actions:"
	echo "	make:parser <parser name> - Creates a new parser with given name."
	echo "	make:struct <type(node/container/childable/listable)> <structure name> - Creates a new structure class with given name and type."
	echo "	help - Shows this text."
}


if (( $# < 1 )); then
	echo "Required at least 1 argument."
	exit
fi

WORKDIR="/sdcard/AppProjects/yapl/yaplc"
SUBCMD=$1
shift

case "$SUBCMD" in
	"make:parser")
		if (( $# < 1 )); then
			echo "Required a parser name."
			exit
		fi
		
		NAME=$1
		shift
		
		echo "#pragma once

#include \"parser.h\"

namespace yaplc { namespace parser {
	class $NAME : public Parser<> {
	protected:
		virtual void handle();
	};
} }" > "src/yaplc/parser/$(echo ${NAME} | tr '[:upper:]' '[:lower:]').h"

		echo "#include \"$(echo ${NAME} | tr '[:upper:]' '[:lower:]').h\"

namespace yaplc { namespace parser {
	void $NAME::handle() {
		//
	}
} }" > "src/yaplc/parser/$(echo ${NAME} | tr '[:upper:]' '[:lower:]').cpp"
	;;
	"make:struct")
		if (( $# < 2 )); then
			echo "Required a structure type and name."
			exit
		fi
		
		TYPE=$1
		shift
		
		NAME=$1
		shift
		
		case "$TYPE" in
			"node")
				CLASS="Node"
			;;
			"container")
				CLASS="Container"
			;;
			"childable")
				CLASS="Childable"
			;;
			"listable")
				CLASS="Listable"
			;;
			*)
				help "make:struct"
				exit
			;;
		esac
		
		echo "#pragma once

#include \"$(echo ${CLASS} | tr '[:upper:]' '[:lower:]').h\"

namespace yaplc { namespace structure {
	class $NAME : public $CLASS {
	public:
		//
	};
} }" > "src/yaplc/structure/$(echo ${NAME} | tr '[:upper:]' '[:lower:]').h"
	;;
	*)
		help
		exit
	;;
esac
